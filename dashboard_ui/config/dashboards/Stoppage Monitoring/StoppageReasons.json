{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 4,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "influxdb"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "filterable": false,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "options": {
        "footer": {
          "enablePagination": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "9.1.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "query": "import \"date\"\nimport \"array\"\nimport \"contrib/tomhollingworth/events\"\nimport \"join\"\n\n\nstart = from(bucket: \"stoppage_monitoring\")\n |> range(start: date.sub(d:1d,from:v.timeRangeStart), stop: v.timeRangeStart)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n |> filter(fn: (r) => r[\"_field\"] == \"status\")\n |> keep(columns: [\"_time\",\"_value\",\"_field\",\"machine_id\"])\n |> last()\n |> map(fn: (r) => ({r with _time: v.timeRangeStart}))\n\nbody = from(bucket: \"stoppage_monitoring\")\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n |> filter(fn: (r) => r[\"_field\"] == \"status\")\n |> keep(columns: [\"_time\",\"_value\",\"_field\",\"machine_id\"])\n\ndataset = union(tables: [start,body])\n\n\nintermediate = dataset\n  |> drop(columns: [\"_start\",\"_stop\",\"status\"])\n  |> sort(columns: [\"_time\"])\n  |> events.duration(unit: 1s, stop: v.timeRangeStop)\n  |> duplicate(column: \"_value\",as: \"_bucket\")\n  |> group(columns: [\"_bucket\"])\n  |> filter(fn: (r) => r[\"_bucket\"] != \"Running\" and r[\"_bucket\"] != \"Shift End\")\n  \ncount = intermediate\n  |> duplicate(column: \"_value\",as: \"count\")\n  |> count(column:\"count\")\n\nintermediate\n  |> sum(column: \"duration\")\n  |> join.inner(\n    right: count,\n    on: (l, r) => l._bucket == r._bucket,\n    as: (l, r) => ({l with count: r.count}),\n)\n |> group()\n |> map(fn: (r) => ({r with duration: string(v: duration(v: r.duration*1000*1000*1000))}))\n\n\n\n  ",
          "refId": "A"
        }
      ],
      "title": "Stoppage Reasons",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {},
            "renameByName": {
              "_bucket": "Reason",
              "duration": ""
            }
          }
        }
      ],
      "type": "table"
    }
  ],
  "refresh": false,
  "schemaVersion": 37,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Stoppage Reasons",
  "uid": "A0VDzcAVk",
  "version": 4,
  "weekStart": ""
}
