{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 2,
  "links": [
    {
      "asDropdown": false,
      "icon": "external link",
      "includeVars": false,
      "keepTime": true,
      "tags": [],
      "targetBlank": false,
      "title": "Dashboards",
      "tooltip": "",
      "type": "dashboards",
      "url": ""
    }
  ],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "influxdb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red",
                "value": null
              },
              {
                "color": "#EAB839",
                "value": 90
              },
              {
                "color": "green",
                "value": 95
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 5,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "9.1.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "query": "import \"date\"\nimport \"array\"\nimport \"contrib/tomhollingworth/events\"\n\nstart = from(bucket: \"stoppage_monitoring\")\n |> range(start: date.sub(d:1d,from:v.timeRangeStart), stop: v.timeRangeStart)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n//  |> filter(fn: (r) => r[\"_field\"] == \"running\")\n |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n |> keep(columns: [\"_time\",\"running\",\"status\",\"machine_name\"])\n |> last(column: \"_time\")\n |> map(fn: (r) => ({r with _time: v.timeRangeStart}))\n\nbody = from(bucket: \"stoppage_monitoring\")\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n//  |> filter(fn: (r) => r[\"_field\"] == \"running\")\n |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n |> keep(columns: [\"_time\",\"running\",\"status\",\"machine_name\"])\n\ndataset = union(tables: [start,body])\n\n\ndataset\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> drop(columns: [\"_start\",\"_stop\"])\n  |> sort(columns: [\"_time\"])\n  |> events.duration(unit: 1s, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"status\"] != \"Shift End\")\n  |> group(columns: [\"running\",\"machine_name\"])\n  |> sum(column: \"duration\")\n  |> pivot(rowKey: [], columnKey: [\"running\"], valueColumn: \"duration\")\n  |> map(fn: (r) => ({r with utilisation: if r.false!=0 then float(v:r.true) / float(v:r.true+r.false) *100.0 else 100.0}))\n  |> keep(columns: [\"utilisation\",\"machine_name\"])",
          "refId": "A"
        }
      ],
      "title": "Utilisation",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "utilisation (.*)",
            "renamePattern": "$1"
          }
        }
      ],
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "influxdb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "dthms"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 7,
        "x": 5,
        "y": 0
      },
      "id": 12,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "frameIndex": 1,
        "showHeader": true
      },
      "pluginVersion": "9.1.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "query": "import \"date\"\nimport \"array\"\nimport \"contrib/tomhollingworth/events\"\n\nstart = from(bucket: \"stoppage_monitoring\")\n |> range(start: date.sub(d:1d,from:v.timeRangeStart), stop: v.timeRangeStart)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n//  |> filter(fn: (r) => r[\"_field\"] == \"running\")\n |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n |> keep(columns: [\"_time\",\"running\",\"status\",\"machine_name\"])\n |> last(column: \"_time\")\n |> map(fn: (r) => ({r with _time: v.timeRangeStart}))\n\nbody = from(bucket: \"stoppage_monitoring\")\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n//  |> filter(fn: (r) => r[\"_field\"] == \"running\")\n |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n |> keep(columns: [\"_time\",\"running\",\"status\",\"machine_name\"])\n\ndataset = union(tables: [start,body])\n\n\ndataset\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> drop(columns: [\"_start\",\"_stop\"])\n  |> sort(columns: [\"_time\"])\n  |> events.duration(unit: 1s, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"status\"] != \"Shift End\")\n  |> group(columns: [\"running\",\"machine_name\"])\n  |> sum(column: \"duration\")\n  |> pivot(rowKey: [], columnKey: [\"running\"], valueColumn: \"duration\")\n  |> group()\n  |> map(\n    fn: (r) => ({r with false: if exists r.false then r.false else 0, true: if exists r.true then r.true else 0}),\n  )",
          "refId": "A"
        }
      ],
      "title": "Total Time",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "false": 2,
              "machine_name": 0,
              "true": 1
            },
            "renameByName": {
              "false": "Stopped",
              "machine_name": "Machine",
              "true": "Running"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "influxdb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 70,
            "lineWidth": 0,
            "spanNulls": false
          },
          "mappings": [
            {
              "options": {
                "Running": {
                  "color": "green",
                  "index": 0
                },
                "Shift End": {
                  "color": "transparent",
                  "index": 1
                }
              },
              "type": "value"
            },
            {
              "options": {
                "pattern": ".*",
                "result": {
                  "color": "red",
                  "index": 2
                }
              },
              "type": "regex"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 11,
        "x": 12,
        "y": 0
      },
      "id": 4,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "mergeValues": true,
        "rowHeight": 0.9,
        "showValue": "auto",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "query": "import \"date\"\n\nstart = from(bucket: \"stoppage_monitoring\")\n |> range(start: date.sub(d:1d,from:v.timeRangeStart), stop: v.timeRangeStart)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n |> filter(fn: (r) => r[\"_field\"] == \"status\")\n |> keep(columns: [\"_time\",\"_value\",\"_field\",\"machine_name\"])\n |> last()\n |> map(fn: (r) => ({r with _time: v.timeRangeStart}))\n\nbody = from(bucket: \"stoppage_monitoring\")\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n |> filter(fn: (r) => r[\"_field\"] == \"status\")\n |> keep(columns: [\"_time\",\"_value\",\"_field\",\"machine_name\"])\n\ndataset = union(tables: [start,body])\n\ndataset\n  |> keep(columns: [\"_time\",\"_value\",\"machine_name\"])",
          "refId": "A"
        }
      ],
      "title": "Machine States",
      "transformations": [],
      "type": "state-timeline"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "influxdb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 4,
        "x": 0,
        "y": 10
      },
      "id": 6,
      "options": {
        "displayLabels": [
          "value"
        ],
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "9.1.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "query": "import \"date\"\n\nstart = from(bucket: \"stoppage_monitoring\")\n |> range(start: date.sub(d:1d,from:v.timeRangeStart), stop: v.timeRangeStart)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n |> filter(fn: (r) => r[\"_field\"] == \"status\")\n |> keep(columns: [\"_time\",\"_value\",\"_field\",\"machine_id\"])\n |> last()\n |> map(fn: (r) => ({r with _time: v.timeRangeStart}))\n\nbody = from(bucket: \"stoppage_monitoring\")\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n |> filter(fn: (r) => r[\"_field\"] == \"status\")\n |> keep(columns: [\"_time\",\"_value\",\"_field\",\"machine_id\"])\n\ndataset = union(tables: [start,body])\n\n\ndataset\n  |> duplicate(column: \"_value\", as: \"buckets\")\n  |> group(columns: [\"buckets\"], mode: \"by\")\n  |> filter(fn: (r) => r[\"buckets\"] != \"Running\" and r[\"buckets\"] != \"Shift End\")\n  |> count()",
          "refId": "A"
        }
      ],
      "title": "Total Number of Stops",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "_value (.*)",
            "renamePattern": "$1"
          }
        }
      ],
      "type": "piechart"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "influxdb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": [],
          "unit": "dthms"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 4,
        "x": 4,
        "y": 10
      },
      "id": 8,
      "options": {
        "displayLabels": [
          "value"
        ],
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "9.1.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "query": "import \"date\"\nimport \"array\"\nimport \"contrib/tomhollingworth/events\"\n\nstart = from(bucket: \"stoppage_monitoring\")\n |> range(start: date.sub(d:1d,from:v.timeRangeStart), stop: v.timeRangeStart)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n |> filter(fn: (r) => r[\"_field\"] == \"status\")\n |> keep(columns: [\"_time\",\"_value\",\"_field\",\"machine_id\"])\n |> last()\n |> map(fn: (r) => ({r with _time: v.timeRangeStart}))\n\nbody = from(bucket: \"stoppage_monitoring\")\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n |> filter(fn: (r) => r[\"_field\"] == \"status\")\n |> keep(columns: [\"_time\",\"_value\",\"_field\",\"machine_id\"])\n\ndataset = union(tables: [start,body])\n\n\ndataset\n  |> drop(columns: [\"_start\",\"_stop\",\"status\"])\n  |> sort(columns: [\"_time\"])\n  |> events.duration(unit: 1s, stop: v.timeRangeStop)\n  |> duplicate(column: \"_value\",as: \"bucket\")\n  |> group(columns: [\"bucket\"])\n  |> sum(column: \"duration\")\n  |> pivot(rowKey: [], columnKey: [\"bucket\"], valueColumn: \"duration\")\n  |> drop(columns: [\"Running\"])\n  |> drop(columns: [\"Shift End\"])\n  ",
          "refId": "A"
        }
      ],
      "title": "Total Time Stopped",
      "transformations": [],
      "type": "piechart"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "influxdb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "red",
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "dthms"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 15,
        "x": 8,
        "y": 10
      },
      "id": 10,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "groupWidth": 0.8,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "auto",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        },
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 0
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "query": "import \"date\"\nimport \"array\"\nimport \"contrib/tomhollingworth/events\"\n\nstart = from(bucket: \"stoppage_monitoring\")\n |> range(start: date.sub(d:1d,from:v.timeRangeStart), stop: v.timeRangeStart)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n |> filter(fn: (r) => r[\"_field\"] == \"status\")\n |> keep(columns: [\"_time\",\"_value\",\"_field\",\"machine_name\"])\n |> last()\n |> map(fn: (r) => ({r with _time: v.timeRangeStart}))\n\nbody = from(bucket: \"stoppage_monitoring\")\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n |> filter(fn: (r) => r[\"_measurement\"] == \"fault_tracking\")\n |> filter(fn: (r) => r[\"_field\"] == \"status\")\n |> keep(columns: [\"_time\",\"_value\",\"_field\",\"machine_name\"])\n\ndataset = union(tables: [start,body])\n\n\ndataset\n  |> drop(columns: [\"_start\",\"_stop\",\"status\"])\n  |> sort(columns: [\"_time\"])\n  |> events.duration(unit: 1s, stop: v.timeRangeStop)\n  |> duplicate(column: \"_value\",as: \"bucket\")\n  |> group(columns: [\"bucket\",\"machine_name\"])\n  |> sum(column: \"duration\")\n  |> pivot(rowKey: [], columnKey: [\"bucket\"], valueColumn: \"duration\")\n  |> drop(columns: [\"Running\",\"Shift End\"])\n  |> group()\n  |> map(fn: (r) => ({r with _time: v.timeRangeStart, machine_name: string(v:r.machine_name)+\":\"}))",
          "refId": "A"
        }
      ],
      "title": "Fault Times",
      "transformations": [],
      "type": "barchart"
    }
  ],
  "refresh": false,
  "schemaVersion": 37,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-12h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Overview Dashboard",
  "uid": "w_PlcrN4z",
  "version": 25,
  "weekStart": ""
}
